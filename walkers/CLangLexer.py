# Generated from CLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,256,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,
        10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,25,4,25,182,8,25,11,25,12,25,183,1,25,1,25,1,
        26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
        32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
        35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,5,40,239,
        8,40,10,40,12,40,242,9,40,1,41,1,41,1,42,1,42,1,43,1,43,5,43,250,
        8,43,10,43,12,43,253,9,43,1,43,1,43,0,0,44,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,1,0,7,3,0,9,10,13,13,32,32,2,0,65,
        90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,49,57,1,0,39,
        39,6,0,32,32,44,44,46,46,48,57,65,90,97,122,258,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,5,97,1,
        0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,106,1,0,0,0,13,108,1,0,0,0,15,
        112,1,0,0,0,17,115,1,0,0,0,19,119,1,0,0,0,21,122,1,0,0,0,23,125,
        1,0,0,0,25,128,1,0,0,0,27,131,1,0,0,0,29,133,1,0,0,0,31,135,1,0,
        0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,142,1,0,0,0,39,149,1,0,0,0,
        41,152,1,0,0,0,43,160,1,0,0,0,45,165,1,0,0,0,47,169,1,0,0,0,49,175,
        1,0,0,0,51,181,1,0,0,0,53,187,1,0,0,0,55,189,1,0,0,0,57,191,1,0,
        0,0,59,195,1,0,0,0,61,201,1,0,0,0,63,208,1,0,0,0,65,213,1,0,0,0,
        67,218,1,0,0,0,69,224,1,0,0,0,71,226,1,0,0,0,73,228,1,0,0,0,75,230,
        1,0,0,0,77,232,1,0,0,0,79,234,1,0,0,0,81,236,1,0,0,0,83,243,1,0,
        0,0,85,245,1,0,0,0,87,247,1,0,0,0,89,90,5,59,0,0,90,2,1,0,0,0,91,
        92,5,112,0,0,92,93,5,114,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,
        96,5,116,0,0,96,4,1,0,0,0,97,98,5,40,0,0,98,6,1,0,0,0,99,100,5,41,
        0,0,100,8,1,0,0,0,101,102,5,115,0,0,102,103,5,113,0,0,103,104,5,
        114,0,0,104,105,5,116,0,0,105,10,1,0,0,0,106,107,5,44,0,0,107,12,
        1,0,0,0,108,109,5,65,0,0,109,110,5,78,0,0,110,111,5,68,0,0,111,14,
        1,0,0,0,112,113,5,79,0,0,113,114,5,82,0,0,114,16,1,0,0,0,115,116,
        5,78,0,0,116,117,5,79,0,0,117,118,5,84,0,0,118,18,1,0,0,0,119,120,
        5,61,0,0,120,121,5,61,0,0,121,20,1,0,0,0,122,123,5,33,0,0,123,124,
        5,61,0,0,124,22,1,0,0,0,125,126,5,62,0,0,126,127,5,61,0,0,127,24,
        1,0,0,0,128,129,5,60,0,0,129,130,5,61,0,0,130,26,1,0,0,0,131,132,
        5,62,0,0,132,28,1,0,0,0,133,134,5,60,0,0,134,30,1,0,0,0,135,136,
        5,40,0,0,136,137,5,41,0,0,137,32,1,0,0,0,138,139,5,123,0,0,139,34,
        1,0,0,0,140,141,5,125,0,0,141,36,1,0,0,0,142,143,5,114,0,0,143,144,
        5,101,0,0,144,145,5,116,0,0,145,146,5,117,0,0,146,147,5,114,0,0,
        147,148,5,110,0,0,148,38,1,0,0,0,149,150,5,105,0,0,150,151,5,102,
        0,0,151,40,1,0,0,0,152,153,5,101,0,0,153,154,5,108,0,0,154,155,5,
        115,0,0,155,156,5,101,0,0,156,157,5,45,0,0,157,158,5,105,0,0,158,
        159,5,102,0,0,159,42,1,0,0,0,160,161,5,101,0,0,161,162,5,108,0,0,
        162,163,5,115,0,0,163,164,5,101,0,0,164,44,1,0,0,0,165,166,5,102,
        0,0,166,167,5,111,0,0,167,168,5,114,0,0,168,46,1,0,0,0,169,170,5,
        119,0,0,170,171,5,104,0,0,171,172,5,105,0,0,172,173,5,108,0,0,173,
        174,5,101,0,0,174,48,1,0,0,0,175,176,5,109,0,0,176,177,5,97,0,0,
        177,178,5,105,0,0,178,179,5,110,0,0,179,50,1,0,0,0,180,182,7,0,0,
        0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,
        0,184,185,1,0,0,0,185,186,6,25,0,0,186,52,1,0,0,0,187,188,5,46,0,
        0,188,54,1,0,0,0,189,190,5,58,0,0,190,56,1,0,0,0,191,192,5,105,0,
        0,192,193,5,110,0,0,193,194,5,116,0,0,194,58,1,0,0,0,195,196,5,102,
        0,0,196,197,5,108,0,0,197,198,5,111,0,0,198,199,5,97,0,0,199,200,
        5,116,0,0,200,60,1,0,0,0,201,202,5,115,0,0,202,203,5,116,0,0,203,
        204,5,114,0,0,204,205,5,105,0,0,205,206,5,110,0,0,206,207,5,103,
        0,0,207,62,1,0,0,0,208,209,5,118,0,0,209,210,5,111,0,0,210,211,5,
        105,0,0,211,212,5,100,0,0,212,64,1,0,0,0,213,214,5,84,0,0,214,215,
        5,114,0,0,215,216,5,117,0,0,216,217,5,101,0,0,217,66,1,0,0,0,218,
        219,5,70,0,0,219,220,5,97,0,0,220,221,5,108,0,0,221,222,5,115,0,
        0,222,223,5,101,0,0,223,68,1,0,0,0,224,225,5,43,0,0,225,70,1,0,0,
        0,226,227,5,45,0,0,227,72,1,0,0,0,228,229,5,42,0,0,229,74,1,0,0,
        0,230,231,5,61,0,0,231,76,1,0,0,0,232,233,5,94,0,0,233,78,1,0,0,
        0,234,235,5,47,0,0,235,80,1,0,0,0,236,240,7,1,0,0,237,239,7,2,0,
        0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,
        0,241,82,1,0,0,0,242,240,1,0,0,0,243,244,7,3,0,0,244,84,1,0,0,0,
        245,246,7,4,0,0,246,86,1,0,0,0,247,251,7,5,0,0,248,250,7,6,0,0,249,
        248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,
        254,1,0,0,0,253,251,1,0,0,0,254,255,7,5,0,0,255,88,1,0,0,0,4,0,183,
        240,251,1,6,0,0
    ]

class CLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    WS = 26
    POINT = 27
    COLON = 28
    INT = 29
    FLOAT = 30
    STRING = 31
    VOID = 32
    TRUE = 33
    FALSE = 34
    ADD = 35
    SUBSTRACT = 36
    MULTIPLY = 37
    EQUAL = 38
    POW = 39
    DIV = 40
    ID = 41
    NUMBER = 42
    DECIMAL = 43
    STR = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'print'", "'('", "')'", "'sqrt'", "','", "'AND'", "'OR'", 
            "'NOT'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'()'", 
            "'{'", "'}'", "'return'", "'if'", "'else-if'", "'else'", "'for'", 
            "'while'", "'main'", "'.'", "':'", "'int'", "'float'", "'string'", 
            "'void'", "'True'", "'False'", "'+'", "'-'", "'*'", "'='", "'^'", 
            "'/'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "POINT", "COLON", "INT", "FLOAT", "STRING", "VOID", "TRUE", 
            "FALSE", "ADD", "SUBSTRACT", "MULTIPLY", "EQUAL", "POW", "DIV", 
            "ID", "NUMBER", "DECIMAL", "STR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "WS", "POINT", 
                  "COLON", "INT", "FLOAT", "STRING", "VOID", "TRUE", "FALSE", 
                  "ADD", "SUBSTRACT", "MULTIPLY", "EQUAL", "POW", "DIV", 
                  "ID", "NUMBER", "DECIMAL", "STR" ]

    grammarFileName = "CLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


